

# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Patching some stuff
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************
    

- name: 🛰️  START - PATCH INGRESS
  debug: 
    msg="{{ lookup('pipe','date +%d.%m.%Y---%H:%M:%S') }}"


- name: Log
  shell: |
    export MESSAGE="Create valid Ingress Certificates"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../install_{{current_cp4waiops_feature.kind}}.log
    echo $currentDate" - "$MESSAGE  >> ../install_{{current_cp4waiops_feature.kind}}.log
  ignore_errors: true

- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: cp4waiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_cp4waiops_feature.kind}} - Create valid Ingress Certificates'    
    EOF
  ignore_errors: true
  when: global_config.create_ocp_notifications | default(true) == true  
   

- name: 🌏 NETWORK - CHECK Ingress already patched
  shell: |
    set -x

    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
    SECRET_COUNT=$(oc get AutomationUIConfig -n $WAIOPS_NAMESPACE -oyaml|grep 'secretName: external-tls-secret'|wc -l|tr -d ' ')
    if [ $SECRET_COUNT -gt 0 ]; then
      echo "true"
    else
      echo "false"
    fi
  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash
    
  
- name: 🌏 NETWORK - DEBUG Ingress already patched
  debug: 
    var: output_string.stdout_lines
    verbosity: 2

- name: 🌏 NETWORK - ☑️ CHECK Ingress already patched
  set_fact: INGRESS_PATCHED={{output_string.stdout_lines[0]}}



# --------------------------------------------------------------------------------------------------------------------------------------
# Adapt Slack Welcome Message
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 🕦 NETWORK - Wait for Slack Pod Ready
  shell:  |
          export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
          oc wait --namespace="$WAIOPS_NAMESPACE" --for=condition=Ready pods $(oc get po -n "$WAIOPS_NAMESPACE"|grep "aimanager-aio-chatops-slack-integrator"|awk '{print$1}') --timeout=600s
  ignore_errors: true  
  register: slack_ready


- name: 🌏 NETWORK - Patch NetworkPolicy
  shell: |
    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

    cat <<EOF | oc apply -f -
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: allow-all-egress-and-ingress
      annotations:
        argocd.argoproj.io/sync-wave: "3"
      namespace: $WAIOPS_NAMESPACE
    spec:
      egress:
      - {}
      ingress:
      - {}
      podSelector: {}
      policyTypes:
      - Egress
      - Ingress
    EOF
  when: INGRESS_PATCHED==false
  register: network_patch
  ignore_errors: true


- name: 💊 CERTIFICATES - Patch AutomationUIConfig and Nginx Certificates
  shell: |
    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

    oc project $WAIOPS_NAMESPACE
    PROJECT_CP4WAIOPS=$WAIOPS_NAMESPACE

    AUTO_UI_INSTANCE=$(oc get AutomationUIConfig -n ${PROJECT_CP4WAIOPS} --no-headers -o custom-columns=":metadata.name")

    ingress_pod=$(oc get secrets -n openshift-ingress | grep tls | grep -v router-metrics-certs-default | awk '{print $1}')

    oc get secret -n openshift-ingress ${ingress_pod} -o jsonpath='{.data.tls\.crt}'  | base64 --decode > cert.crt
    oc get secret -n openshift-ingress ${ingress_pod} -o jsonpath='{.data.tls\.key}' | base64 --decode > cert.key

    oc get secret -n ${PROJECT_CP4WAIOPS} external-tls-secret -o yaml > external-tls-secret.yaml

    oc patch AutomationUIConfig ${AUTO_UI_INSTANCE} -n ${PROJECT_CP4WAIOPS} --type merge --patch '{"spec": {"tls": {"caSecret": {"key":"ca.crt", "secretName": "external-tls-secret"}, "certificateSecret": { "secretName": "external-tls-secret"}}}}'

    oc create secret generic -n ${PROJECT_CP4WAIOPS} external-tls-secret --from-file=cert.crt=cert.crt --from-file=cert.key=cert.key -o yaml --dry-run=client | oc apply -f -

    oc delete pod -n ${PROJECT_CP4WAIOPS} -l component=ibm-nginx
  when: INGRESS_PATCHED==false
  register: certificate_patch
  ignore_errors: true
  args:
    executable: /bin/bash


- name: 🟢 DEBUG - Patch AutomationUIConfig Certificates
  debug: 
    var: certificate_patch
    verbosity: 2


- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: cp4waiops-notification
    spec:
      backgroundColor: '#ff7700'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_cp4waiops_feature.kind}} - 🕦 Wait for nginx coming back up (up to 3 minutes) - Started at {{ ansible_date_time.time }} UTC'    
    EOF
  ignore_errors: true
  when: global_config.create_ocp_notifications | default(true) == true  


# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for nginx Pods
# --------------------------------------------------------------------------------------------------------------------------------------
- name: CERTIFICATES -           🕦 Wait for nginx coming back up
  shell: |
    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
    oc get po -n $WAIOPS_NAMESPACE | grep nginx|grep -v ibm-nginx-tester|grep -v setup-nginx-job |grep "1/1"|grep -c ""
  register: kubectl_get_pods
  until: kubectl_get_pods.stdout == "2"
  retries: 50
  delay: 15




- name: 💊 CERTIFICATES - Patch Certificates for TechZone IPI
  shell: |
    CLUSTER_ROUTE=$(oc get routes console -n openshift-console | tail -n 1 2>&1 )
    CLUSTER_FQDN=$( echo $CLUSTER_ROUTE | awk '{print $2}')
    CLUSTER_NAME=${CLUSTER_FQDN##*console.}


    if [[ $CLUSTER_NAME =~ "cloud.techzone.ibm.com" ]];
    then
        echo "✅ Seems that you're on Techzone IPI"  
        echo "✅ Let's patch the certificates"  
        oc get secret -n openshift-ingress letsencrypt-certs -o jsonpath='{.data.tls\.crt}'  | base64 --decode > cert.crt
        oc get secret -n openshift-ingress letsencrypt-certs -o jsonpath='{.data.tls\.key}' | base64 --decode > cert.key
        sed -e '1,34d' cert.crt > ca.crt

        oc -n ibm-common-services patch managementingress default --type merge --patch '{"spec":{"ignoreRouteCert":true} }'
        oc -n ibm-common-services get secret route-tls-secret -o yaml > backup_route-tls-secret.yaml
        echo "Common Service signed cert"

        oc -n ibm-common-services delete certificates.v1alpha1.certmanager.k8s.io route-cert
        oc -n ibm-common-services delete secret route-tls-secret
        oc -n ibm-common-services create secret generic route-tls-secret  --from-file=ca.crt=./ca.crt --from-file=tls.crt=./cert.crt --from-file=tls.key=./cert.key
        oc -n ibm-common-services delete secret ibmcloud-cluster-ca-cert
        oc -n ibm-common-services delete pod -l app=auth-idp
        oc -n ibm-common-services delete pod -l name=operand-deployment-lifecycle-manager
        oc -n ibm-common-services delete pod $(oc -n ibm-common-services get pods | grep '^management-ingress' | awk '{print$1}')
    else
        echo "✅ Seems that you're NOT on Techzone IPI"  
        echo "✅ No need to patch the certificates any further"  
    fi
  when: INGRESS_PATCHED==false
  register: certificate_patch
  ignore_errors: true
  args:
    executable: /bin/bash


- name: 🟢 DEBUG - Patch AutomationUIConfig Certificates
  debug: 
    var: certificate_patch





# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for AutomationUIConfig ready
# --------------------------------------------------------------------------------------------------------------------------------------
# - name: CERTIFICATES -         🕦 Wait for AutomationUIConfig being ready (this might take several minutes)
#   shell: oc get AutomationUIConfig -n $WAIOPS_NAMESPACE iaf-system  | grep True|grep -c ""
#   register: kubectl_get_pods
#   until: kubectl_get_pods.stdout == "1"
#   retries: 500
#   delay: 15


- name: SLACK -                  🩹 Patch Slack Welcome Message
  shell: |
    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

    oc set env -n $WAIOPS_NAMESPACE deployment/$(oc get deploy -n $WAIOPS_NAMESPACE -l app.kubernetes.io/component=chatops-slack-integrator -o jsonpath='{.items[*].metadata.name }') SLACK_WELCOME_COMMAND_NAME=/welcome
    oc delete pod $(oc get po -n $WAIOPS_NAMESPACE|grep slack|awk '{print$1}'):-notfound  --ignore-not-found -n $WAIOPS_NAMESPACE --grace-period 0 --force
  ignore_errors: true


