
# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Patches
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************

- name: 🛰️  START - CREATE ROUTES
  debug: 
    msg="{{ lookup('pipe','date +%d.%m.%Y---%H:%M:%S') }}"


- name: Log
  shell: |
    export MESSAGE="Create External Routes"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../install_{{current_cp4waiops_feature.kind}}.log
    echo $currentDate" - "$MESSAGE  >> ../install_{{current_cp4waiops_feature.kind}}.log
  ignore_errors: true

- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: cp4waiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_cp4waiops_feature.kind}} - Create External Routes'    
    EOF
  ignore_errors: true
  when: global_config.create_ocp_notifications | default(true) == true  


# --------------------------------------------------------------------------------------------------------------------------------------
# Patch Ingress
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 🚀 ROUTES - Patch Ingress policy-group
  shell: oc patch namespace default --type=json -p '[{"op":"add","path":"/metadata/labels","value":{"network.openshift.io/policy-group":"ingress"}}]'
  register: ingress_patched


# - name: HACK    -             🩹 Patch AIOpsAnalyticsOrchestrator Pull Secret
#   shell: oc patch AIOpsAnalyticsOrchestrator aiops -n $WAIOPS_NAMESPACE --type merge  --patch-file ./templates/waiops/patches/analytics-pull-patch.yaml
#   ignore_errors: true
#   register: irorchestrator_patched



# --------------------------------------------------------------------------------------------------------------------------------------
# Create Topology Routes
# --------------------------------------------------------------------------------------------------------------------------------------
# - name: 🚀 ROUTES - Check Topology Routes
#   shell: |
#     export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
#     oc get route --ignore-not-found -n $WAIOPS_NAMESPACE topology-merge
#   ignore_errors: true
#   register: OBJECT_EXISTS



- name: 🚀 ROUTES - Create External Routes
  block:
  - name: 🚀 ROUTES - Create Topology Route - topology-merge
    shell: |
      export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
      existing=$(oc get route topology-merge -n $WAIOPS_NAMESPACE --no-headers|awk '{print$1}')
      if [[ $existing == "" ]]; then
        echo "Create Route"
        oc create route passthrough topology-merge -n $WAIOPS_NAMESPACE --insecure-policy="Redirect" --service=aiops-topology-merge --port=https-merge-api
      fi
    ignore_errors: true
    register: output
    args:
      executable: /bin/bash
  - name: 🟣  OUTPUT
    debug:
      var: output.stdout_lines
      verbosity: 1


  - name: 🚀 ROUTES - Create Topology Route - topology-rest
    shell: |
      export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
      existing=$(oc get route topology-rest -n $WAIOPS_NAMESPACE --no-headers|awk '{print$1}')
      if [[ $existing == "" ]]; then
        echo "Create Route"
        oc create route passthrough topology-rest -n $WAIOPS_NAMESPACE --insecure-policy="Redirect" --service=aiops-topology-rest-observer --port=https-rest-observer-admin
      fi
    ignore_errors: true
    register: output
    args:
      executable: /bin/bash
  - name: 🟣  OUTPUT
    debug:
      var: output.stdout_lines
      verbosity: 1


  - name: 🚀 ROUTES - Create Topology Route - topology-file
    shell: |
      export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
      existing=$(oc get route topology-file -n $WAIOPS_NAMESPACE --no-headers|awk '{print$1}')
      if [[ $existing == "" ]]; then
        echo "Create Route"
        oc create route passthrough topology-file -n $WAIOPS_NAMESPACE --insecure-policy="Redirect" --service=aiops-topology-file-observer --port=https-file-observer-admin
      fi
    ignore_errors: true
    register: output
    args:
      executable: /bin/bash
  - name: 🟣  OUTPUT
    debug:
      var: output.stdout_lines
      verbosity: 1


  - name: 🚀 ROUTES - Create Topology Route - topology-manage
    shell: |
      export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
      existing=$(oc get route topology-manage -n $WAIOPS_NAMESPACE --no-headers|awk '{print$1}')
      if [[ $existing == "" ]]; then
        echo "Create Route"
        oc create route passthrough topology-manage -n $WAIOPS_NAMESPACE --service=aiops-topology-topology --port=https-topology-api
      fi
    ignore_errors: true
    register: output
    args:
      executable: /bin/bash
  - name: 🟣  OUTPUT
    debug:
      var: output.stdout_lines
      verbosity: 1


  - name: 🚀 ROUTES - Create Topology Route - topology-file-api
    shell: |
      export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
      existing=$(oc get route topology-file-api -n $WAIOPS_NAMESPACE --no-headers|awk '{print$1}')
      if [[ $existing == "" ]]; then
        echo "Create Route"
        oc create route reencrypt topology-file-api -n $WAIOPS_NAMESPACE --service=aiops-topology-file-observer --port=https-file-observer-api
      fi
    ignore_errors: true
    register: output
    args:
      executable: /bin/bash
  - name: 🟣  OUTPUT
    debug:
      var: output.stdout_lines
      verbosity: 1


  #when: OBJECT_EXISTS.stdout|length == 0




  - name: 🚀 ROUTES - Create external Flink Job Manager Route 
    shell: |
      export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
      existing=$(oc get route job-manager -n $WAIOPS_NAMESPACE --no-headers|awk '{print$1}')
      if [[ $existing == "" ]]; then
        echo "Create Route"
        oc create route edge job-manager -n $WAIOPS_NAMESPACE --service=cp4waiops-eventprocessor-eve-29ee-ep-jobmanager --port=ui
      fi
    ignore_errors: true
    register: output
    args:
      executable: /bin/bash
  - name: 🟣  OUTPUT
    debug:
      var: output.stdout_lines
      verbosity: 1

  
  - name: 🚀 ROUTES - Create external Flink Policy Job Manager Route 
    shell: |
      export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
      existing=$(oc get route job-manager-policy -n $WAIOPS_NAMESPACE --no-headers|awk '{print$1}')
      if [[ $existing == "" ]]; then
        echo "Create Route"
        oc create route edge job-manager-policy -n $WAIOPS_NAMESPACE --service=aiops-ir-lifecycle-eventprocessor-ep-jobmanager --port=ui
      fi
    ignore_errors: true
    register: output
    args:
      executable: /bin/bash
  - name: 🟣  OUTPUT
    debug:
      var: output.stdout_lines
      verbosity: 1






  - name: 🚀 ROUTES - Create external CP4WAIOps API Route 
    shell: |
      export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
      existing=$(oc get route ai-platform-api -n $WAIOPS_NAMESPACE --no-headers|awk '{print$1}')
      if [[ $existing == "" ]]; then
        echo "Create Route"
        oc create route passthrough ai-platform-api -n $WAIOPS_NAMESPACE  --service=aimanager-aio-ai-platform-api-server --port=4000 --insecure-policy=Redirect --wildcard-policy=None
      fi
    ignore_errors: true
    register: output
    args:
      executable: /bin/bash
  - name: 🟣  OUTPUT
    debug:
      var: output.stdout_lines
      verbosity: 1



  - name: 🚀 ROUTES - Create external Datalayer API Route 
    shell: |
      export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
      existing=$(oc get route datalayer-api -n $WAIOPS_NAMESPACE --no-headers|awk '{print$1}')
      if [[ $existing == "" ]]; then
        echo "Create Route"
        oc create route reencrypt datalayer-api -n $WAIOPS_NAMESPACE  --service=aiops-ir-core-ncodl-api --port=secure-port --insecure-policy=Redirect --wildcard-policy=None
      fi
    ignore_errors: true
    register: output
    args:
      executable: /bin/bash
  - name: 🟣  OUTPUT
    debug:
      var: output.stdout_lines
      verbosity: 1



  - name: 🚀 ROUTES - Create external AIO Controller Route 
    shell: |
      export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
      existing=$(oc get route aimanager-aio-controller -n $WAIOPS_NAMESPACE --no-headers|awk '{print$1}')
      if [[ $existing == "" ]]; then
        echo "Create Route"
        oc create route passthrough aimanager-aio-controller -n $WAIOPS_NAMESPACE  --service=aimanager-aio-controller
      fi
    ignore_errors: true
    register: output
    args:
      executable: /bin/bash
  - name: 🟣  OUTPUT
    debug:
      var: output.stdout_lines
      verbosity: 1



  - name: 🚀 ROUTES - Enable Swagger on external Datalayer API Route 
    shell: |
      export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
      existing=$(oc get route aiops-ir-core-ncodl-api -n $WAIOPS_NAMESPACE --no-headers|awk '{print$1}')
      if [[ $existing == "" ]]; then
        echo "Create Route"
        oc set env deploy -n $WAIOPS_NAMESPACE aiops-ir-core-ncodl-api ENABLE_SWAGGER_UI="true" 
      fi
    ignore_errors: true
    register: output
    args:
      executable: /bin/bash
  - name: 🟣  OUTPUT
    debug:
      var: output.stdout_lines
      verbosity: 1


  - name: 🚀 ROUTES - Create Spark Master UI Route 
    shell: |
      export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
      existing=$(oc get route sparkadmin -n $WAIOPS_NAMESPACE --no-headers|awk '{print$1}')
      if [[ $existing == "" ]]; then
        echo "Create Route"
        oc create route edge sparkadmin -n $WAIOPS_NAMESPACE  --service=aiops-ir-analytics-spark-master
        oc expose svc aiops-ir-analytics-spark-master -n $WAIOPS_NAMESPACE --name spark
      fi
    ignore_errors: true
    register: output
    args:
      executable: /bin/bash
  - name: 🟣  OUTPUT
    debug:
      var: output.stdout_lines
      verbosity: 1

  

  when: current_cp4waiops_feature.create_external_routes == true



# --------------------------------------------------------------------------------------------------------------------------------------
# Delete ImgPull error pods
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 🚀 ROUTES - Delete Pods with ImgPull Error  
  shell: |
        export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
    
        errorPods=$(oc get po -n $WAIOPS_NAMESPACE|grep ImagePull|awk '{print$1}')
        if [[ ! $errorPods == "" ]]; then
          echo "Refreshing Pods"
          oc delete pod $(oc get po -n $WAIOPS_NAMESPACE|grep ImagePull|awk '{print$1}'):-notfound  --ignore-not-found -n $WAIOPS_NAMESPACE
        fi


  ignore_errors: true
