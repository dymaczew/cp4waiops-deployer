
# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Install Turbonomic
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************

# --------------------------------------------------------------------------------------------------------------------------------------
# Install Turbonomic
# --------------------------------------------------------------------------------------------------------------------------------------

- name: 🛰️  START - INSTALL TURBONOMIC
  debug: 
    msg="{{ lookup('pipe','date +%d.%m.%Y---%H:%M:%S') }}"


- name: Log
  shell: |
    export MESSAGE="Installing TURBONOMIC"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../install_{{current_cp4waiops_feature.kind}}.log
    echo $currentDate" - "$MESSAGE  >> ../install_{{current_cp4waiops_feature.kind}}.log
  ignore_errors: true

- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: cp4waiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_cp4waiops_feature.kind}} - Prerequisites'    
    EOF
  ignore_errors: true
  when: global_config.create_ocp_notifications | default(true) == true  


- name: 🚀 TURBONOMIC - Create Turbonomic namespace
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: "turbonomic"
    state: present
  

- name: 🚀 TURBONOMIC - Create Turbonomic scc
  shell: |
    oc delete clusterrolebinding turbonomic-admin1 --ignore-not-found
    oc delete clusterrolebinding turbonomic-admin2 --ignore-not-found
    oc adm policy add-scc-to-group anyuid system:serviceaccounts:turbonomic
    oc create clusterrolebinding turbonomic-admin1 --clusterrole=cluster-admin --serviceaccount=turbonomic:t8c-operator
    oc create clusterrolebinding turbonomic-admin2 --clusterrole=cluster-admin --serviceaccount=turbonomic:turbo-user
  ignore_errors: true
  register: demo_robot_shop
        
- name: 🚀 TURBONOMIC - Delete ClusterRoleBinding turbo-all-binding in case of ROKS
  shell: |
    oc delete clusterrolebinding turbo-all-binding -n turbonomic --ignore-not-found
  ignore_errors: true


- name: 🚀 TURBONOMIC - Create Turbonomic Operator Group
  kubernetes.core.k8s:
    state: present
    namespace: turbonomic
    src: ./templates/turbonomic/turbo-operatorgroup.yaml
  


- name: 🚀 TURBONOMIC - Create Turbonomic Subscription
  kubernetes.core.k8s:
    state: present
    namespace: turbonomic
    src: ./templates/turbonomic/turbo-subscription.yaml
  



- name: 🕦 TURBONOMIC - Wait for CRD to become ready
  shell: oc get crd -n turbonomic xls.charts.helm.k8s.io --ignore-not-found  --no-headers| grep -c ""
  register: kubectl_get_pods
  until: kubectl_get_pods.stdout == "1"
  retries: 500
  delay: 15


- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: cp4waiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_cp4waiops_feature.kind}} - Create Instance'    
    EOF
  ignore_errors: true
  when: global_config.create_ocp_notifications | default(true) == true  



- name: 🚀 TURBONOMIC - Create Turbonomic Instance
  kubernetes.core.k8s:
    state: present
    namespace: turbonomic
    template: ./templates/turbonomic/turbo-instance.j2
  

- name: 🕦 TURBONOMIC - Wait for 120 seconds
  shell: sleep 120


# - name: 💊 CERTIFICATES - Patch Certificates for TechZone IPI
#   shell: |
#     CLUSTER_ROUTE=$(oc get routes console -n openshift-console | tail -n 1 2>&1 )
#     CLUSTER_FQDN=$( echo $CLUSTER_ROUTE | awk '{print $2}')
#     CLUSTER_NAME=${CLUSTER_FQDN##*console.}


#     if [[ $CLUSTER_NAME =~ "cloud.techzone.ibm.com" ]];
#     then
#       echo "✅ Seems that you're on Techzone IPI"  
#       echo "✅ Let's patch the certificates"  
#       echo "--------------------------------------------------------------------------------------------------------------------------"
#       export certcrt=$(oc get secret -n openshift-ingress letsencrypt-certs -o jsonpath='{.data.tls\.crt}' | base64 --decode)
#       export cacrt=$(echo "$certcrt" | sed -e '1,34d')
#       export certkey=$(oc get secret -n openshift-ingress letsencrypt-certs -o jsonpath='{.data.tls\.key}' | base64 --decode)
#       export cacrt=$(echo $cacrt|tr -d '\n')
#       export certkey=$(echo $certkey|tr -d '\n')

#       echo "--------------------------------------------------------------------------------------------------------------------------"
#       echo $cacrt
#       echo "--------------------------------------------------------------------------------------------------------------------------"
#       echo $certkey

#       echo "spec:" > /tmp/xl_patch_ingress.yaml
#       echo "  global:" >> /tmp/xl_patch_ingress.yaml
#       echo "    ingress:" >> /tmp/xl_patch_ingress.yaml
#       echo "      secrets:" >> /tmp/xl_patch_ingress.yaml
#       echo "        - certificate: |" >> /tmp/xl_patch_ingress.yaml
#       echo "$certcrt"| sed 's/^/           /' >> /tmp/xl_patch_ingress.yaml
#       echo "          key: |" >> /tmp/xl_patch_ingress.yaml
#       echo "$certkey"| sed 's/^/           /' >> /tmp/xl_patch_ingress.yaml
#       echo "          name: nginx-ingressgateway-certs" >> /tmp/xl_patch_ingress.yaml

#       cat /tmp/xl_patch_ingress.yaml
#       oc -n turbonomic delete secret nginx-ingressgateway-certs --ignore-not-found
#       oc patch Xl/xl-release -n turbonomic --type merge --patch-file /tmp/xl_patch_ingress.yaml


#     else
#         echo "✅ Seems that you're NOT on Techzone IPI"  
#         echo "✅ No need to patch the certificates any further"  
#     fi

#   register: certificate_patch
#   ignore_errors: true
#   args:
#     executable: /bin/bash


# - name: 🟢 DEBUG - Patch AutomationUIConfig Certificates
#   debug: 
#     var: certificate_patch


# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for turbonomic Namespace to be ready
# --------------------------------------------------------------------------------------------------------------------------------------

- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: cp4waiops-notification
    spec:
      backgroundColor: '#ff7700'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_cp4waiops_feature.kind}} - 🕦 Wait for Turbonomic to be ready (about 10-15 minutes) - Started at $(date +%H:%M:%S) UTC'    
    EOF
  ignore_errors: true
  when: global_config.create_ocp_notifications | default(true) == true  


- name: 🕦 TURBONOMIC - Wait for >50 pods in namespace turbonomic
  shell: oc get po -n turbonomic |grep "1/"| wc -l
  register: kubectl_num_pods
  until: kubectl_num_pods.stdout|int > 62
  retries: 500
  delay: 15


- name: 🕦 TURBONOMIC - Wait for turbonomic to become ready
  shell: oc get po -n turbonomic | grep -v Running |grep -v Completed|grep -v Error|grep -v prometheus-server | grep -c ""
  register: kubectl_get_pods
  until: kubectl_get_pods.stdout == "1"
  retries: 500
  delay: 15